https://ko.redux.js.org/tutorials/essentials/part-1-overview-concepts
redux 흐름은 이 페이지의 gif 참고

dispatch-store는
고객센터-본사(혹은 CS하청업체-본사, 민원 접수창구-해당 부서)라든가...택배사 대리점-물류창고 이런 식의 구조 개념으로 생각하면 대충 이해되는 듯


- 프레젠테이셔널 컴포넌트 : 가시적인 부분. 콘테이너 컴포넌트로부터 props만 받아오고, redux store와는 직접적으로 접촉하지 않음 (여기서는 components 폴더에 들어가있음)
- 컨테이너 컴포넌트 : redux와 실질적으로 소통하는 컴포넌트. (스토어에서 state를 건네받는 것이 컨테이너 컴포넌트) 프레젠테이션 컴포넌트에게 props 보내준다.


*** 리덕스 코딩 작업과정 ***
1. 컨테이너 만들기
2. 리듀서(모듈) 만들기
3. 리듀서 합쳐주기
4. (index.js에) 스토어 만들기 -> 프로바이더로 제공
5. 커넥트로 컨테이너 컴포넌트를 리덕스와 연결
6. 컨테이너 컴포넌트에서 프레젠테이셔널 컴포넌트로 state와 액션생성함수를 전달


덕스(ducks) 패턴 => 액션타입, 액션 생성함수, 리듀서 함수를 한 파일에 모아서 만들 예정
(보통 이렇게 모아서 쓰고 따로따로는 잘 안 쓴다. 파일 너무 많아져서 그럴 듯?)


== 파일명 작성 ==
컴포넌트는 객체니까 대문자로 작성
모듈은 객체가 아니고 그냥 js니까 소문자


CounterContainer에서 커링함수(in 자바스크립트)와 hoc을 사용

커링함수 : 함수 안에서 함수를 리턴하는 것
https://ko.javascript.info/currying-partials

== hoc (고차 컴포넌트) ==
매개변수에 컴포넌트를 주는 것
https://ko.reactjs.org/docs/higher-order-components.html

